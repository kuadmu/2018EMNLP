a survey of systems for keywords search over data graphs is given in. there are two main approaches for ranking answers: ir methods and proximity search. in the former ir techniques are used, whereas in the latter the idea is to minimize the weights of trees that contain the keywords of the query. an answer in both systems consists of tuples that contain all the keywords of the query. both use a very simple ranking model that counts the number of tuples in an answer. the systems that rank answers by means of ir methods are. the work of extends the scoring model of as follows. each tuple in an answer gets an ir score that is produced by some underlying inverted index on columns that contain text attributes. the ir score of a set of tuples is de ned as the sum of the ir scores of the individual tuples divided by the number of tuples. thus, it is the average ir score per tuple of an answer. the work of extends the work of by introducing several normalization factors that are used for combining the individual ir scores into an ir score of an answer. in, instead of combining individual tuple scores as in, they view a whole answer as a virtual document and use ir methods, such as tf and idf, to assign a relevance score. they also apply some normalization factors; for example, a size normalization factor that depends on the number of tuples in an answer. in this work, we assign ir scores to nodes and edges as well as to full answers. we combine the ir scores with structural weights that re ect the semantic strength of answers. the systems of employ the second approach that assigns weights to the nodes and edges of the data graph, and then ranks answers by increasing weight. in, they nd answers by starting instances of dijkstra shortest path algorithm from several nodes that contain the keywords of the query. in, weights are assigned to nodes based on their prestige. their algorithm enumerates answers with polynomial delay in a approximate order by increasing height. that algorithm can provably nd all the non redundant subtrees that contain the keywords of the query. they mention that their scoring function for answers combines both the graph structure and content scoring using ir methods. ciency, they do not give details on their scoring function. in this paper, we present a ranking method that uses structural weights and combines them in a novel way with ir scores that are derived by means of language models. the work of has developed a language model approach to sparql queries that are augmented with keywords. they use a witness count for each triplet to indicate the number of times that the triplet was extracted from some text. ranking is done according to the kullback leibler divergence between the language models of the query and each answer. keyword search is attractive, since it does not require any knowledge of the underlying schema of the data graph. several papers have tried to bridge the gap between fully structured queries and keyword search by letting the user re ne her query. the work of suggests an interactive framework, where the user starts with keyword search and then, through an exploration phase, she can focus her query by re ning and ltering. the work of suggests a ui, where the user starts with keyword search and the system presents several interpretations for the query. the work of suggests a new query language that is based on keyword search, but with a simple notation for structural constraints using conjunctions and nesting with relations. ectiveness of keyword search can be increased signi cantly by using very simple syntax that expresses basic knowledge about the schema of the data graph.