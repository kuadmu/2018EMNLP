software based approaches are usually algorithmic modi cations and can be utilized without any hardware modi cations. rinard et al use early phase termination technique to terminate parallel phase as soon as there are too few remaining tasks to keep the processor busy to prevent the processors from being idle and wasting energy. sartori et al introduce a software approximation technique which targets control divergence on gpus. paraprox is a software framework which detects patterns in data parallel applications and applies different approximation techniques such as loop perforation, approximate memoization, and tile approximation based on the detected patterns. all these software approximation techniques need a quality management system to monitor the output quality and control the aggressiveness of the approximation during execution. esmaeilzadeh et al demonstrated dual voltage operation, with a high voltage for precise operations and a low voltage for approximate operations. the low voltage pipeline introduces faults in the operations and hence these operation are approximate. amant et al design limited precision analog hardware to accelerate approximable code sections. sampson et al improve memory array lifetime using approximation. flikker is an application level technique that reduces the refresh rate of dram memories which store non critical data. the rumba quality management system can be added to these hardware based approximation techniques to control and improve their output quality. ansel et al use a genetic algorithm to nd the best approximate code that provides the acceptable quality. in this work, the programmer writes runtime low overhead checking functions to verify output quality online. in this technique, while gpu runs the approximate version, the cpu is responsible to check the quality of a subset of data for the next invocation. to reduce the performance overhead of monitoring, size of the subset that is processed by the cpu is small and thus, ccgaccuracy to predict the output quality is limited. unlike ccg, rumba has light weight checkers and therefore, it can investigate larger subset of the data compared to ccg. green is a framework that developers can use to take advantages of approximation opportunities to achieve better performance or reduce energy consumption. however, in contrast to these techniques, because of its lightweight checkers, rumba checks all invocations to reduce large errors and to make sure that the output quality is acceptable for all invocations. when the performance drops below target performance, powerdial will increase the aggressiveness of the approximation to match the performance requirements. their goal is to maximize accuracy while maintaining applicationperformance. several probabilistic reasoning models are also introduced to compute the probability of the output being wrong. in contrast, rumba dynamically monitors the output quality during runtime and recovers from the large errors generated by an approximation technique. hardware reliability solutions for soft computations aim to allow errors in error tolerant parts of an application with the goal of lowering the cost of reliability. we leverage this idea in the context of recovering against approximation errors and it ts well with the nature of the code regions that are mapped to approximate accelerators. approximate computing techniques can be broadly classi ed into two categories: software based and hardware based approaches. loop perforation is one of the well known software approximation techniques which skips the iterations of loops randomly or uniformly. enerj proposed hardware techniques such as voltage scaling, width reduction in oating point operations, reducing dram refresh rate, and reducing sram supply voltage to reduce energy consumption. du et al also use hardware neural networks to trade off accuracy for energy savings. however, rumba can automatically manage the output quality without programmerhelp. in order to make sure that output quality is acceptable, green checks the output quality once in everyinvocations. sage is an approximation framework for gpus that automatically generates approximate versions of the input program using skipping atomic expressions, compressing data, and tile approximation. sage also uses a similar quality sampling strategy as green to check the output quality frequently. powerdial is a framework that dynamically monitors the applicationperformance during runtime. hardware reliability for soft computations and approximate computing share the same basic underlying philosophy. approximate computing, where the accuracy is traded off for better performance or higher energy ef ciency, is a wellknown technique. different hardware approximation techniques have also been proposed to save energy while improving performance. we compare against the hardware neural network proposed by the same authors extensively in our results section. there exist a few quality management solutions to control quality in an approximate computing system. green builds a quality of service model based on the pro ling data that gets used at runtime. some other techniques statically analyze applications assuming an input distribution to reason about the output quality under approximation. such techniques do not need sampling but can only handle limited computational patterns and approximation methods. the idea of reexecution has previously been used in the context of reliability to recover against hardware faults.