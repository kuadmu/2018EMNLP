in the past, researchers have also suggested using customized or pool memory allocator for heap intensive memory allocator. it might also require non trivial modi cations to source code. such memory allocators also suffer from potentially large memory footprint and fragmentation issues because of possibly coarser allocation and deallocation granularity. berger et al show that a general purpose allocator such as doug leamemory allocator can perform as good as custom allocators or even better in some cases. in this work, we of oad doug leamemory allocator using our mmt approach. heap server needs bit map based memory allocator as base memory allocator for security reasons but mmt does not suffer from any such restrictions. dynamic memory management for a uniprocessor system in general, past studies have attempted to improve the performance of dynamic memory management in two ways: designing and implementing better memory management algorithms, and increasing the cache reference locality of dynamically allocated objects, through various techniques such as changing the heap layout, predicting lifetime and reference pattern of heap objects, using pro ling information, hardware support, etc. these studies primarily focused on reducing the dynamic memory management cost and improving the overall performance of the application on single processor systems. however, mmt approach spurs a new research direction in dynamic memory management by exploring how multicore parallelism can bene. sequential applications by virtue of dedicated memory management thread. however, designing and implementing such customized memory allocators for a given application requires substantial programming effort as application programmer has to know the allocation and deallocation pattern of the application to design an ef cient custom memory allocator. moreover, with such allocators memory related debugging and leak detection becomes programmers challenging burden. it should be noted mmt approach is also orthogonal to other general purpose memory allocators because it illustrates the ef cient of oading of dynamic memory management functions without exploiting the implementation of underlying memory allocator or proposing any memory management algorithm. dynamic memory management on multicore and multiprocessor systems researchers have also designed and implemented ef cient memory allocators for multithreaded application which run on multicore and multiprocessor systems. but it should be noticed that ef cient design of multithreaded memory allocators introduces different challenges than its sequential counterpart, for example scalability, false sharing avoidance and restricting memory blow up. we believe that mmt can be used to build ef cient multithreaded memory allocators, but design and implementation of such a memory allocator is outside the scope of this work. helper assisting threads a dedicated thread for speeding up sequential programs have been used before. such a thread, typically referred to as helper thread, runs on a separate core or thread context and performs prefetching, branch prediction, and serves other purposes. mmt also uses a separate thread for dynamic memory management, however no prior work has explored the challenges and opportunities in of oading dynamic memory management functions to a separate thread. heap server kharbutli et al also proposed decoupling the memory management functions into a separate process to separate the heap meta data and heap data storage in different address spaces in order to improve heap security however, heap server improves heap data security on expense on performance, mmt primarily focuses on improving performance. moreover, of oading to a thread for performance poses completely different set of communication, synchronization and reference locality challenges than of oading to a process.