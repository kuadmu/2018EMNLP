unsupervised clustering can be significantly improved using supervision in the form of pairwise constraints, ie, pairs of instances labeled as belonging to same or different clusters. in recent years, a number of algorithms have been proposed for enhancing clustering quality by employing such supervision. such methods use the constraints to either modify the objective function, or to learn the distance measure. we propose a probabilistic model for semi supervised clustering based on hidden markov random fields that provides a principled framework for incorporating supervision into prototype based clustering. the model generalizes a previous approach that combines constraints and euclidean distance learning, and allows the use of a broad range of clustering distortion measures, including bregman divergences and directional similarity measures. we present an algorithm that performs partitional semi supervised clustering of data by minimizing an objective function derived from the posterior energy of the hmrf model. experimental results on several text data sets demonstrate the advantages of the proposed framework. web clustering engines organize search results by topic, thus offering a complementary view to the flat ranked list returned by conventional search engines. in this survey, we discuss the issues that must be addressed in the development of a web clustering engine, including acquisition and preprocessing of search results, their clustering and visualization. search results clustering, the core of the system, has specific requirements that cannot be addressed by classical clustering algorithms. we emphasize the role played by the quality of the cluster labels as opposed to optimizing only the clustering structure. we highlight the main characteristics of a number of existing web clustering engines and also discuss how to evaluate their retrieval performance. some directions for future research are finally presented. search engines are an invaluable tool for retrieving information from the web. in response to a user query, they return a list of results ranked in order of relevance to the query. the user starts at the top of the list and follows it down examining one result at a time, until the sought information has been found. however, while search engines are de nitely good for certain search tasks such as nding the home page of an organization, they may be less effective for satisfying broad or ambiguous queries. the results on different subtopics or meanings of a query will be mixed together in the list, thus implying that the user may have to sift through a large number of irrelevant items to locate those of interest. on the other hand, there is no way to exactly gure out what is relevant to the user given that the queries are usually very short and their interpretation is inherently ambiguous in the absence of a context. a different approach to web information retrieval is based on categorizing the whole web, whether manually or automatically, and then letting the user see the results associated with the categories that best match his or her query. however, even the largest web directories such as the open directory project cover only a small fraction of the existing pages. furthermore, the directory may be of little help for a particular user query, or for a particular aspect of it. in fact, the web directories are most often used to in uence the output of a direct search in response to common user queries. a third method is search results clustering, which consists of grouping the results returned by a search engine into a hierarchy of labeled clusters. this method combines the best features of query based and category based search, in that the user may focus on a general topic by a weakly speci ed query, and then drill down through the highly speci. themes that have been dynamically created from the query results. the main advantage of the cluster hierarchy is that it makes for shortcuts to the items that relate to the same meaning. in addition, it allows better topic understanding and favors systematic exploration of search results. to illustrate, figure # shows the clustered results returned for the query tiger. like many queries on the web, tiger has multiple meanings with several high scoring hits each: the feline, the mac oscomputer operating system, the golf champion, the unix security tool, the chinese horoscope, the mapping service, and so on. these different meanings are well represented in figure #. by contrast, if we submit the query tiger to google or yahoo, we see that each meaningitems are scattered in the ranked list of search results, often through a large number of result pages. major search engines recognize this problem and interweave documents related to different topics a technique known as implicit clustering but given the limited capacity of a single results page, certain topics will be inevitably hidden from the user. on the same query, the open directory does a good job in grouping the items about the feline and the golf champion, but it completely fails to cover the other meanings. the systems that perform clustering of web search results, also known as clustering engines, have become rather popular in recent years. the rst commercial clustering engine was probably northern light, at the end of the year#s. it was based on a prede ned www dmoz org figure #. screenshots from the commercial engine viv isimo, with selection of cluster mac os, and the open source carrot, with selection of cluster tiger woods. carpineto et al set of categories, to which the search results were assigned. a major breakthrough was then made by viv isimo, whose clusters and cluster labels were dynamically generated from the search results. viv isimo won the best meta search engine award assigned by searchenginewatch com from year# to year#. nowadays, several commercial systems for topic clustering are available that may output different clusters and cluster labels for the same query, although little is known about the particular methods being employed. one common feature of most current clustering engines is that they do not maintain their own index of documents; similar to meta search engines, they take the search results from one or more publicly accessible search engines. even the major search engines are becoming more involved in the clustering issue. clustering by site is currently provided by several commercial systems including google. the concept recognition that multiple search engines are working on also seems related to clustering of search results. not only has search results clustering attracted considerable commercial interest, but it is also an active research area, with a large number of published papers discussing speci. search results clustering is clearly related to the eld of document clustering but it poses unique challenges concerning both the effectiveness and the ef ciency of the underlying algorithms that cannot be addressed by conventional techniques. the main difference is the emphasis on the quality of cluster labels, whereas this issue was of somewhat lesser importance in earlier research on document clustering. the consequence has been the development of new algorithms, surveyed in this article, that are primarily focused on generating expressive cluster labels rather than optimal clusters. note, however, that this article is not another survey of general purpose clustering algorithms. our focus is on the systems that perform search results clustering, in which such new algorithms are usually encompassed. we discuss the issues that must be addressed to develop a web clustering engine and the technical solutions that can be adopted. we consider the whole processing pipeline, from search result acquisition to visualization of clustered results. we also review existing systems and discuss how to assess their retrieval performance. although there have been earlier attempts to review search results clustering, their scope is usually limited to the clustering techniques, without considering the issues involved in the realization of a complete system. furthermore, earlier reviews are mostly outdated and or largely incomplete. to our knowledge, this is the rst systematic review of web clustering engines that deals with issues, algorithms, implementation, systems, and evaluation. this article is intended for a large audience. besides summarizing current practice for researchers in information retrieval and web technologies, it may be of value to academic and industry practitioners interested in implementation and assessment of systems, as well as to scienti. professionals who may want a snapshot of an evolving technology. the rest of the article is organized in the following way. section # discusses the main limitations of search engines that are addressed by clustering engines. section # introduces the de nitional and pragmatic features of search results clustering. section # analyzes the main stages in which a clustering engine can be broken down namely, acquisition of search results, input preprocessing, construction of clusters, and visualization of clustered results. the algorithms used in the clustering stage are classi ed based on the relative importance of cluster formation and cluster labeling. section # provides an overview of the main existing systems whose technical details have been disclosed. section # deals with computational ef ciency and system implementation. section # is devoted to retrieval performance evaluation. we discuss how to compare the retrieval effectiveness of a clustering engine to that of a plain search engine and how to compare different clustering engines, including an experimental study of the subtopic retrieval performance of several clustering algorithms. in section # directions for future work are highlighted and, nally, in section # we present our conclusions. with a wiki like search interface, users can edit ranks of search results and share the edits with the rest of the world. this is an effective way of personalization, as well as a practice of mass collaboration that allows users to vote for ranking and improve search performance. currently, there are several ongoing experimentation efforts from the industry, eg, searchwiki by google andrank by microsoft. beyond that, there is little published research on this new search paradigm. in this paper, we make an effort to establish a framework for rank editing and sharing in the context of web search, where we identify fundamental issues and propose principled solutions. comparing to existing systems, for rank editing, our framework allows users to specify not only relative, but also absolute preferences. for edit sharing, our framework provides enhanced flexibility, allowing users to select arbitrarily aggregated views. in addition, edits can be shared among similar queries. we present a prototype system rants, that implements the framework and provides search services through the google web search api. recently, several web search giants are experimenting on a new wiki like search interface, where users can edit ranks of search results directly. it is also a practice of mass collaboration at a world wide scale that allows users to vote for ranking of search results and improve search performance. it is not revealed what exactly they aim to achieve and what the approaches are. ort to establish a framework by identifying the fundamental issues and proposing principled solutions for rank editing and sharing. copyright is held by the international world wide web conference committee. distribution of these papers is limited to classroom use, and personal use by others. www year#, april, year#, raleigh, north carolina, usa. joey jan texas state university san marcos university drive san marcos, tx, usa, jj txstate edu the proposed framework features extended functionalities beyond searchwiki andrank. for rank editing, users can specify not only relative, but also absolute preferences. for edit sharing, the notion of aggregation is generalized and users can select arbitrarily aggregated views. beyond sharing among users, edits can be transferred to similar queries, which can be considered sharing among queries. these extensions generate bene ts, as well as non trivial technical complications. we deployed a prototype system rants, that tackles the challenges and implements the framework, providing web search services through the google api. existing systems provide two editing operations, promotion and demotion, where a logged in usercan promote or demote a search resultfor a queryby one or more positions. let up and down denote the two operations, where up means to moveup by positions if possible. how to interpret a move the user intention behind a move is unfortunately ambiguous. aggressively, it may mean an assertion for the ranking of all results after the move. conservatively, it may mean several pairwise preferences for the involving results only. in our framework, we take a conservative approach and make the least inferences from a move. for example, if after up by userfor query, surpassedand, we store two pairs and, meaning that for, userprefersto appear beforeand. we adopt this least inference principle for the following reasons. firstly, it generates the least, if not none, ambiguity. in the above example, although by the same move different users may mean di erently, all of them would mean at least those two pairwise preferences. we do not even infer on the precedence relationship between. secondly, it well serves the purpose that, given the same list of unedited search results for query, the same ranking as edited will be restored if the inferred pairwise preferences are respected. based on this interpretation, up is equivalent to two consecutive executions of up. thus, in rants, we only allow up and down, meaning up and down, indicated by the. this is not a limitation, but an emphasis on primitive functionalities, instead of syntactic sugars, for conceptual clarity. the two operations actually map to the same task, a swap of positions of two results. there are often situations where users want to specify absolute preferences as well. for example, usermay always want to see resultappear among top for query. this cannot be achieved by relative preferences because over time, there would be new results fortaking the top seats whose pairwise preferences. mostly, userwants to stipulate that resultmust appear among top, instead of not. we use a pair to capture this absolute preference. as shown in figure #, for each, can be entered into the box to the right of the. in rants, this operation is implemented by a primitive function anchor. rank edits are user preferences that can be aggregated and shared among users. rants utilizes function aggr to generalize the notion of aggregation. no matter logged in or out, usercan arbitrarily specify, the set of users whose edits are to be used for aggregation. if, the original, unedited search results will be presented without enforcing any stored preferences. suppose a same edit is speci ed by a set. then the edit can be shared if dag, where dag is a tunable threshold. it is greatly bene cial if we can properly transfer rank edits from a query to its similar ones. for example, if useredited the results for query david dewitt, it is very likely that she wants to reuse the edits for query david. edit transfer can be considered as edit sharing among queries, in contrast to sharing among users. in the function, two similarity measures are used. ranksim compares the ranks of search results ofand. both need to pass their respective thresholds dws and drs. obviously, the bigger the thresholds, the more conservative the transfer. setting the thresholds to shuts down edit transfer. we take stored rank edits as user constraints that need to be respected and enforced in processing query. in rants, this is implemented by functions enfor and enfor, which enforce a set of relative preferencesand a set of absolute preferences. and a are determined byand a selected aggregation. the enforcement adopts a so called least modi cation principle, where as little as possible modi cation is used in enforcing the constraints, and the degree of modi cation is measured by edit distance between the rankings of search results before and after the enforcement. in rants, consistency of relative preferences are maintained and they are guaranteed to be completely enforced. to do so for absolute preferences entails tremendous technical complications that signi cantly slow down rank editing and query processing for a minimal gain. ort approach can achieve complete enforcement of absolute preferences in normal cases. in summary, in this introductory study we consider the following fundamental issues. how to interpret, capture and store user preferences how to keep them consistent and redundancyfree how to aggregate them for sharing among users how to transfer them to similar queries how to enforce them in processing queries in response to these questions, we construct the following functional primitives: swap, anchor, aggr, trans, enfor and enfor. their correct and ef cient realization generates non trivial technical challenges. thus, our contributions include the identi cation of fundamental issues involved in the wiki like web search paradigm, the formation of the corresponding functional primitives, the provision of solutions to the associated technical challenges, and the implementation of these solutions. for example, searchwiki by google andrank by microsoft. searchwiki andrank are under testing, often returning inconsistent or unintuitive results. up to our knowledge, there is no published research under this topic. in rants, this task is implemented by a primitive function swap. ifall, the edits from all users will be used. such that it is appropriate to transfer edits for query. this paper uses data from the social bookmarking site delicio. we produce a generative model of collaborative tagging in order to understand the basic dynamics behind tagging, including how a power law distribution of tags could arise. we empirically examine the tagging history of sites in order to determine how this distribution arises over time and to determine the patterns prior to a stable distribution. the debate within the web community over the optimal means by which to organize information often pits formalized classifications against distributed collaborative tagging systems. a number of questions remain unanswered, however, regarding the nature of collaborative tagging systems including whether coherent categorization schemes can emerge from unsupervised tagging by users. us to examine the dynamics of collaborative tagging systems. in particular, we examine whether the distribution of the frequency of use of tags for popular sites with a long history can be described by a power law distribution, often characteristic of what are considered complex systems. lastly, by focusing on the high frequency tags of a site where the distribution of tags is a stabilized power law, we show how tag co occurrence networks for a sample domain of tags can be used to analyze the meaning of particular tags given their relationship to other tags. a small but increasingly in uential set of web applications, including copyright is held by the international world wide web conference committee. distribution of these papers is limited to classroom use, and personal use by others. there are both bene ts and drawbacks to the tagging approach. this paper will empirically examine a crucial aspect of this question: whether tag distributions stabilize over time, and if so, what type of distribution emerges. online tagging systems have a variety of features that are often associated with complex systems such as a large number of users, a lack of central coordination, and non linear dynamics, and these sort of systems are known to produce a type over time a distribution known as a power law. one important feature of power laws produced by complex systems is that they can often be scale free, such that regardless of how larger the system grows, the shape of the distribution remains the same, and thus stable. we are concerned with a thorough demonstration, explanation, and empirical analysis of this phenomenon. the majority of sites reach their peak popularity, the highest frequency of tagging in a given time period, within days of being saved on del icio us though some sites are rediscovered by users, suggesting stability in most sites but some degree of burstiness in the dynamics that could lead to a cyclical relationship to stability characteristic of chaotic systems. however, they do not measure what type of distribution arises from a stabilized tagging process, nor do they present a method for determining stability. they explain that the stability of common tags, which are displayed for users when they save a site, is based on a shared background and set of assumptions among users. assuming a stabilized distribution with a well known shape and set of properties arises, in order to make inferences about the existence of some sort of meaning structure in the distribution, we need to understand the information inherent in the distribution of tags. this inherent structure can be traced to what we call the information value of a tag. they examine the degree distribution and the clustering coef cient of this network and nd that the network is indeed scalefree, and so has the features watts and strogatz found to characterize small world networks: small average path length and relatively high clustering coef cient. a large amount of work exploring the structural properties of nature language networks nds similar results. in section # we formalize a generative model for tagging in order to suggest how the patterns observed in tagging distributions might emerge. in section # we empirically examine whether tagging distributions develop into stable power law distributions and in section # we empirically analyze the trajectory of tagging distributions before they have stabilized. establishing the convergence and stability of these distributions is essential to understanding whether coherent categorization schemes might emerge from distributed tagging systems. finally, we use the importance of the information value of tags to demonstrate how the most frequent tags in a power law distribution can be used in inter tag correlation graphs to chart their relation to one another in section #. it is conjectured that this method might be useful in extracting a classi cation scheme from a categorization scheme. folksonomies and ontologies the issue of how metadata for web resources should be generated with the greatest ef ciency and ef cacy continues to be a central concern as the amount of information on the web grows. the social bookmarking site del ici ous, flickr, furl, rojo, connotea, technorati, and amazon allow users to tag objects with keywords to facilitate retrieval both for the user and for other users. sets of categories that are derived based on the tags that are used to characterize some resource are commonly referred to as folksonomies. this approach to organizing online information is usually contrasted with formal ontologies that are imposed by experts, not by users. tagging is considered a categorization process, in contrast to a preoptimized classi cation process as exempli ed by expert created semantic web ontologies. jacob de nes the distinction between categorization and classi cation in the following way: categorization divides the world of experience into groups or categories whose members share some perceptible similarity within a given context. that this context may vary and with it the composition of the category is the very basis for both the exibility and the power of cognitive categorization while classi cation involves the orderly and systematic assignment of each entity to one and only one class within a system of mutually exclusive and non overlapping classes; it mandates consistent application of these principles within the framework of a prescribed ordering of reality. tagging systems allow much greater malleability and adaptability in organizing information than do formal classi cation systems. proponents of tagging systems argue that groups of users do not have to agree on a hierarchy of tags or detailed taxonomy, they only need to agree, in a general sense, on the meaning of a tag enough to label similar material with terms for there to be cooperation and shared value. tagging is able retrieve the data and share data more ef ciently than classifying: free typing loose associations is just a lot easier than making a decision about the degree of match to a pre de ned category. itlike of the value of a proper taxonomy but times simpler. however, a number of problems stem from organizing information through tagging systems including ambiguity in the meaning of tags and the use of synonyms which creates informational redundancy. the central concern with using collaborative tagging to organize metadata is whether or not the system becomes relatively stable with time and use. by stable, we mean to indicate that users have developed some consensus about which tags best describe a site and those tags are used most often. the most problematic claim for tagging systems would be that because users are not under a centralized controlling vocabulary, no coherent categorization scheme can emerge at all from collaborative tagging. in this case, tagging systems would be inherently unstable, where the tags used and their frequency of use would be in a constant state of ux, especially those systems with an open ended number of nonexpert users like the social bookmarking site del icio us. be dif cult to identify or utilize any collective knowledge produced by users with respect to a site. given the debate over the utility of collaborative tagging systems compared to other methods of organizing information, it is increasingly important to understand whether a coherent and socially navigable way of organizing metadata can emerge from distributive tagging systems. because each tag for a given resource is repeated a number of times by different users, for any given tagged resource, there is a distribution of tags and their associated frequencies. the collection of all tags and their frequencies ordered by rank frequency for a given resource is the tag distribution of that resource. there is hope among the proponents of collaborative tagging systems that a stable distribution might arise from these systems. note that by stable we do not mean that users stop tagging the resource, but instead that the tagging eventually settles to a group of tags that describe the resource well and where new users mostly reinforce already present tags in the same frequency as in the stable distribution. there is reason to believe a stable distribution should arise. researchers have observed, some casually, some more rigorously, that the distribution of tags applied to particular urls in tagging systems follows a power law distribution where there are a relatively small number of tags that are used with great frequency and a great number of tags that are used infrequently. the dynamics and structure of tagging what are the underlying dynamics of a collaborative tagging system that could cause a tag distribution to reach some point of stability work by golder and huberman using del ici ous data has noted a number of patterns in tagging dynamics. importantly, golder and huberman nd that the proportion of frequencies of tags within a given site stabilize over time; they nd it occurs usually after around being bookmarked times. golder and huberman cite two important features of such collaborative tagging systems that might give rise to this type of stability: imitation of others and shared knowledge. features of del icio us is the inclusion of most common tags for a given site when a user saves that site, facilitating the use of the tags others have used with the greatest frequency. given that the stability of tag frequencies presumably relies on both the interaction between users and the shared cultural knowledge of users, the stability and patterns of tag frequency distributions might lend insight into the degree to which there is consensus within a community about how to characterize some site or into whether there are different groups of users with different sets of assumptions and who are tagging the same site. or, as golder and huberman suggest, changes in the stability of such patterns might indicate that groups of users are migrating away from a particular consensus on how to characterize a site and its content or negotiating the changing meaning of that site. to the extent this consensus is stable, it is ripe for development into a classi cation system and perhaps even formalization into an ontology. by information value we mean the information conveyed by the natural language term used in the tag and how this makes the tag useful for retrieval of and distinction between resources or not. document clustering is an important tool for text analysis and is used in many different applications. we propose to incorporate prior knowledge of cluster membership for document cluster analysis and develop a novel semi supervised document clustering model. the method models a set of documents with weighted graph in which each document is represented as a vertex, and each edge connecting a pair of vertices is weighted with the similarity value of the two corresponding documents. the prior knowledge indicates pairs of documents that known to belong to the same cluster. then, the prior knowledge is transformed into a set of constraints. the document clustering task is accomplished by finding the best cuts of the graph under the constraints. we apply the model to the normalized cut method to demonstrate the idea and concept. our experimental evaluations show that the proposed document clustering model reveals remarkable performance improvements with very limited training samples, and hence is a very effective semi supervised classification tool. cient organization, browsing and summarization of large volumes of text documents. document clustering is the unsupervised classi cation of a given document set into clusters such that document within this work was done when at nec labs america. permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for pro. or commercial advantage and that copies bear this notice and the full citation on the rst page. to copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior speci. wei xu shenghuo zhu nec labs america, inc. sv nec labs com each cluster are more similar between each other than those in di erent clusters. as an important tool for exploratory data analysis, the document clustering is enabling techniques for a wide range of information retrieval tasks such as. document clustering generally assumes no training samples from the user, and aims to partition an unlabeled sample set into the user speci ed number of disjoint clusters through an unsupervised, exploratory process. most clustering techniques de ne loss functions over all possible cluster assignment. the loss functions measure the degree to which the clustering goal is met. by optimizing certain loss functions, the optimal assignment should be achieved. the optimization problem is typically solved without considering any prior knowledge on cluster assignment of the data sets. however, in practical, there is usually some prior knowledge available for many data clustering problems. the prior knowledge includes, but not limited to, cluster assignment of some data instances and size of cluster. it comes either from the nature of the data sets or derived clues through intended exploration of data sets. the prior knowledge can be used to form constraints on the ob jective functions of cluster analysis. by applying the constraints to the optimization problem, prior knowledge of data clustering is incorporated into clustering methods to improve the clustering performance. in this paper, we present a novel semi supervised clustering model that incorporates prior knowledge about documents membership for document cluster analysis. it can also be viewed as a technique that enables the user to control the document clustering process by providing his her prior knowledge speci. to the target data set to be clustered. the prior knowledge is provided by indicating pairs of documents that are known to belong to the same cluster, and the number of such training samples can be arbitrary. the userprior knowledge is then enforced as a set of constraints, and the document clustering task is accomplished by nding the cluster set that globally optimizes the constrained cost function. the proposed clustering model can be applied to any spectral clustering methods, and in this paper, we apply the model to the normalized cut method, which has been shown to be the one of the best spectral clustering method, to demonstrate the idea and concept. our clustering model proposed in this paper can be considered as a mechanism of incorporating the usersupervision into the unsupervised document clustering process, which results in a manageable mixture of supervised classi cation and unsupervised clustering. when there is no prior knowledge about the target data set, the model equals the ordinary data clustering method. when the user provides the prior knowledge, the model starts to show the characteristic of the supervised classi cation, which is the attempt to generate the cluster set that minimizes the errors on the training samples. the more training samples the user provides, the more resemblance the model bears to the supervised data classi cation. our experimental evaluations have shown that this data clustering model is very. ective for clustering document corpora with extreme distributions, and for performing data clustering with special users needs. the remainder of the paper is organized as follows. we review previous work on various data clustering methods in section #. section # presents our proposed model, which contains the weighted graph model, constraints, and constrained spectral clustering model. in section #, we discuss details of our experiments. we conclude the paper in section # and discuss several possible future research topics. long web search result lists can be hard to browse. we demonstrated experimentally, in a previous study, the usefulness of a categorization algorithm and filtering interface. however, the nature of interaction in real settings is not known from an experiment in laboratory settings. to address this problem, we provided our categorizing web search user interface to users for a two month period. the interactions with the system were logged and the users opinions were elicited with two questionnaires. the results show that categories are successfully used as part of users search habits. they are helpful when the result ranking of the search engine fails. in those cases, the users are able to access results that locate far in the rank order list with the categories. users can also formulate simpler queries and find needed results with the help of the categories. in addition, the categories are beneficial when more than one result is needed like in an exploratory or undirected search task. we are in a phase of participatory web in which users add value to the information on the web by publishing, tagging and sharing. the participatory web has enormous potential for an enterprise because unlike the users of the internet an enterprise is a community that shares common goals, assumptions, vocabulary and interest and has reliable user identification and mutual trust along with a central governance and incentives to collaborate. everyday, the employees of an organization locate content relevant to their work on the web. finding this information takes time, expertise and creativity, which costs an organization money. that is, the web pages employees find are knowledge assets owned by the enterprise. this investment in web based knowledge assets is lost every time the enterprise fails to capture and reuse them. icollaborate is tooled to capture user web interaction, persist and analyze it, and feed that interaction back into the community the enterprise. we are in a phase of participatory web in which users add value to the information on the web by publishing, tagging and sharing. the participatory web has enormous potential for an enterprise because unlike the users of the internet an enterprise is a community that shares common goals, assumptions, vocabulary and interest and has reliable user identi cation and mutual trust along with a central governance and incentives to collaborate. everyday, the employees of an organization locate content relevant to their work on the web. finding this information takes time, expertise and creativity, which costs an organization money. that is, the web pages employees nd are knowledge assets owned by the enterprise. this investment in web based knowledge assets is lost every time the enterprise fails to capture and reuse them. icollaborate is tooled to capture userweb interaction, persist and analyze it, and feed that interaction back into the community the enterprise. pain points: current web applications that explicitly monitor web browsing activity, such as eyebrowse, are limited by a number of factors. first, they exist out on the copyright is held by the author owner. public web, where user identity, trust, and governance are issues. second, the extent to which they are aimed at providing recommended content and views into browsing trends are challenged by the lack of tightly organized, closed communities. other utilities like delicious, stumbleupon usually need an explicit user actions to mark the page on the user pro le and to rate the page. crowd intelligence in an enterprise: the ideal community for web data mining and services is an enterprise. in an enterprise, user identity and trust can be assured. the sub net of web pages that employees use is, by de nition, focused on the mission and business of the enterprise. these user groups can be utilized to enhance the web browsing knowledge of the enterprise as a whole. solution outline: icollaborate speci cally targets a community of enterprise employees. we track userweb interaction via a browser plugin using a page usage score algorithm to determine the extent to which an employee actually used the page. this data, along with data derived from the content of the pages themselves, is used to create clusters of similar users and content. we map users into two different cluster groups based on their long term interest ie browsing history and their short term interests ie their recent web browsing sessions. these clusters are used to provide real time people and content recommendations. using a combination of locality sensitive hashing, min hash and co visitation techniques we bind content based and collaborative ltering for common interest clustering of users and content. these services derived from this analysis is a direct function of the coherence of the community from which it is derived. to an enterprise, seeking competitive advantage by maximizing the use of the information at its disposal, a system like icollaborate can provide much value. faceted search is becoming a popular method to allow users to interactively search and navigate complex information spaces. a faceted search system presents users with key value metadata that is used for query refinement. while popular incommerce and digital libraries, not much research has been conducted on which metadata to present to a user in order to improve the search experience. nor are there repeatable benchmarks for evaluating a faceted search engine. in order to demonstrate these ideas and better understand personalized faceted search, several faceted search algorithms are proposed and evaluated using the novel evaluation methodology. this paper proposes the use of collaborative filtering and personalization to customize the search interface to each user behavior. this paper also proposes a utility based framework to evaluate the faceted interface. organizing web search results into a hierarchy of topics and sub topics facilitates browsing the collection and locating results of interest. in this paper, we propose a new hierarchical monothetic clustering algorithm to build a topic hierarchy for a collection of search results retrieved in response to a query. at every level of the hierarchy, the new algorithm progressively identifies topics in a way that maximizes the coverage while maintaining distinctiveness of the topics. we refer the proposed algorithm to as discover. evaluating the quality of a topic hierarchy is a non trivial task, the ultimate test being user judgment. we use several objective measures such as coverage and reach time for an empirical comparison of the proposed algorithm with two other monothetic clustering algorithms to demonstrate its superiority. even though our algorithm is slightly more computationally intensive than one of the algorithms, it generates better hierarchies. our user studies also show that the proposed algorithm is superior to the other algorithms as a summarizing and browsing tool. the lack of a central structure and freedom from a strict syntax is responsible for making a vast amount of information available on the web, but retrieving this information is not easy. ranked lists copyright is held by the author owner. www, may, year#, new york, new york, usa. raghu krishnapuram ibm india research lab block, iit, hauz khas new delhi year# india kraghura in ibm com returned by search engines are still a popular way of searching and browsing the web today. however, this method is highly inef cient since the number of retrieved search results can be in the thousands for a typical query. most users just view the top ten results and therefore might miss relevant information. moreover, the criteria used for ranking may not re ect the needs of the user. a majority of the queries tend to be short, thus making them non speci. the inherent ambiguity in interpreting a word or a phrase in the absence of its context means that a large percentage of the returned results can be irrelevant to the user. ranked lists have been found to be fairly effective for navigational tasks such as nding the url of an organization. however, since the results are not summarized in terms of topics, they are not well suited for browsing tasks. one possible solution is to create a static hierarchical categorization of the entire web and use these categories to organize the search results of a particular query. for example, the dmoz directory that categorizes web sites is manually created by about thousand editors. however, this solution is feasible only for small collections. for example, dmoz covers less than of the web. secondly, even if we were to categorize the entire web either manually or automatically, the categories may not be useful in organizing the search results of a particular query. this is so because some or all of the sub topics associated with the user query may not be present in the directory. it has been observed that post retrieval document clustering typically produces superior results. taxonomies are generated using document clustering algorithms which typically result in topic or concept hierarchies. concept hierarchies expose the different concepts present in the document collection, as top level nodes in the hierarchy and the user can choose the concept he is interested in and can browse it in detail. examples of search engines that return search results in terms of a hierarchy include vivisimo and kartoo. automatic taxonomy generation algorithms can be categorized into two classes based on how the documents are assigned to different clusters. monothetic algorithms are those in which a document is assigned to a cluster based on a single feature, whereas polythetic algorithms assign documents to the clusters based on multiple features. monothetic clustering is well suited for generating hierarchies for summarization and browsing search results because each cluster is described by a single feature or a concept and all the documents present in a cluster contain this feature. hence, the user can easily understand clusters generated by monothetic clustering algorithms. in this paper, we propose a novel algorithm for post retrieval hierarchical monothetic clustering of search results to generate concept hierarchies. as the algorithm progressively identi es clusters it tries to maximize the distinctiveness of the monothetic features describing the clusters while at the same time maximizing the number of documents that can be described or covered by the monothetic features. we refer to the proposed algorithm as discover. one of the challenges we address in this paper is that of evaluating the performance of the algorithms that generate concept hierarchies. we compare the performance of discover with that of two of other known monothetic algorithms. the two algorithms are caard and dsp and they will be explained in the next section. this comparison is based on certain objective measures and it shows that discover results in hierarchies with superior coverage and reach time. discover takes slightly more time than caard to generate hierarchies, but it takes much less time than dsp. in addition to comparison based on objective measures, we have also conducted user studies evaluate the performance of the algorithms subjectively. the user studies reveal that the hierarchies obtained using discover are more meaningful than to those obtained by caard and dsp. in section #, we describe some of the earlier work on taxonomy generation. in section #, we present the proposed discover algorithm. in section #, we describe the experimental setup that was used for conducting the experiments. we will also describe the various heuristics that we used for identifying interesting phrases in the document collection in detail. we present the comparisons in section # and report the results from our user studies in section #. we summarize our contributions and propose some possible extensions in the last section. query result clustering has recently attracted a lot of attention to provide users with a succinct overview of relevant results. however, little work has been done on organizing the query results for object level search. object level search result clustering is challenging because we need to support diverse similarity notions over object specific features of heterogeneous domains. to address this challenge, we propose a hybrid subspace clustering algorithm called hydra. algorithm hydra captures the user perception of diverse similarity notions from millions of web pages and disambiguates different senses using feature based subspace locality measures. our proposed solution, by combining wisdom of crowds and wisdom of data, achieves robustness and efficiency over existing approaches. we extensively evaluate our proposed framework and demonstrate how to enrich user experiences in object level search using a real world product search scenarios. an important goal of web search engines is to provide end users with relevant results. however, as di erent users often have di erent intents on the same query keyword, two con icting pillars can be de ned to achieve this goal. the this work was done when the rst two authors were at microsoft research asia. permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for pro. or commercial advantage and that copies bear this notice and the full citation on the rst page. to copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior speci. zaiqing nie, ji rong wen microsoft research asia beijing, china microsoft com rst pillar, personalization, aims at maximizing the satisfaction of a particular user, while the second pillar, diversi cation, aims at minimizing the dissatisfaction risk of varying user intents. our goal is thus to pursue both pillars with complementary strengths, to allow users to not only view a big picture of result space but also quickly drill down to speci. toward this goal, the most relevant research area is query result organization for document level search. speci cally, proposed clustering techniques to partition a set of result documents into several subsets covering di erent topics. well known commercial sites include vivisimo, grokker, iboogie, and kartoo, organizing query result clusters into an expandable topic hierarchy or visualizing query results as interconnected topic terms on a map. such interfaces help users see the overview of the entire data visually then drill down to the speci. more recently, studied how such combination of clustering and ranking can be simultaneously computed for. this paper focuses on query result clustering for objectlevel search engines that automatically extract and integrate the information on web objects. in particular, we focus on organizing the query results for microsoft live product search extracting product information from the web document corpus. unlike a document represented as a tf idf vector where every feature value belongs to a homogeneous domain, an object is often represented as numerical feature values of heterogeneous domains, eg, sensor size, price, and weight. as a result, an appropriate similarity for web object pairs is highly data and intent speci. requiring domain expertise to be de ned appropriately, while the similarity notion for documents is rather well agreed, which poses an additional challenge to our problem. to address this challenge, we now allow clusters representing di erent search intents to have di erent salient features, eg, sensor size is important when searching for dslr cameras and weight for compact cameras. as a result, similarity notions also vary signi cantly in di erent clusters. this problem, known as subspace clustering, has been actively studied. speci cally, these algorithms search through possible subspaces, and then determine a subspace that best presents the local similarity of objects, though search and selection schemes vary over algorithms. however, these algorithms typically su er from the following two major disadvantages: http: search live com products figure #: clustering results for query canon complexity: since the subset generation problem is inherently intractable, proposed approximate solutions tend to incur computationally intensive subspace search or require expensive parameter tuning to restrict search space. cluster quality: clustering, being an unsupervised learning technique, may or may not capture locality meaningful to users, depending on the quality of similarity function and feature selection. to train the user perception of locality, recent work discusses semisupervised clustering, adopting explicit human judgements on cluster boundary or whether to link object pairs, often in a limited amount to reduce user intervention. in a clear contrast, we propose a novel framework overcoming these two drawbacks, by adopting large scale implicit human feedbacks on pairwise similarity of all object pairs. more speci cally, we use co occurrences of object pairs appearing in the same web document together. an instance of such co occurrence can be viewed as an implicit relevance feedback re ecting the document creatordecision to see two objects as relevant and display in the same page. co occurrences can be mined from the entire web corpus to build ground truth pairwise similarity matrixwhere sij indicates the co occurrences of objects oi and oj. however, such matrix re ecting human perception of similarity represents varying notions of local similarity. to illustrate, since the de nition of sij between a camera object oi and its accessory oj and that of sik between two cameras oi and ok capture di erent senses of similarity, clustering these three objects into a cluster should be discouraged. to disambiguate these two di erent senses, we adopt the intuition of subspace clustering for quali cation. that is, we put objects into the same cluster, only if they share enough value locality in the same feature subspace. summing up, our proposed framework combines two notions of relevance, co occurrences and feature based local similarity, representing wisdom of crowds and wisdom of data respectively, to achieve the robustness and. ciency over existing approaches: robustness: we use large scale wisdom of crowds to train a clustering algorithm to well capture varying user perceptions of similarity. ciency: we use wisdom of data to disambiguate di erent senses of similarity and achieve. ciency by restricting the use of feature based notion only to qualify whether to merge into the same cluster. figure # shows an example screenshot of our implementation built on live product search. this illustrates how our proposed clustering algorithm, capturing both co occurrence and feature based similarity notions, enriches user experiences in product shopping scenarios. in the gure, a user starts search using her initial interest canon as a query keyword. before making a purchase decision, she would be interested in browsing and comparing with other related products. in particular, we graphically visualize the related items with varying degrees of similarity represented as distances between nodes, captured from co occurrences, eg, a closely displayed pair of canon powershot and canon powershot a is highly related. however, such similarity between dslr cameras has a di erent meaning from the similarity between compact cameras canon eos and canon eos, which we distinguish as di erent cluster locations as illustrated in the gure. such organization enables customers to browse related items with varying complementary strengths then drill down to the category of interest to make an informed purchase decision. to summarize, we believe that this paper has the following contributions: we build an. ective tool to visualize both diversi ed and personalized search results. we propose algorithm hydra combining two relevance notions with complementary strengths to achieve robustness and. we extensively evaluate algorithm hydra and empirically validate the quality of results. we demonstrate algorithm hydra developed for a working real life product search, and illustrate how such tool can enrich user experiences in product shopping scenarios. the rest of this paper is organized as follows. section # reviews related work to our framework. section # states basic notions to develop our framework. section # designs a hybrid clustering algorithm hydra. section # validates our proposed framework both using user study on real life datasets and a larger scale synthetic data evaluation. previous work on understanding user web search behavior has focused on how people search and what they are searching for, but not why they are searching. in this paper, we describe a framework for understanding the underlying goals of user searches, and our experience in using the framework to manually classify queries from a web search engine. our analysis suggests that so called navigational searches are less prevalent than generally believed while a previously unexplored resource seeking goal may account for a large fraction of web searches. we also illustrate how this knowledge of user search goals might be used to improve future web search engines. we begin in section # by looking at previous work on understanding information seeking behavior. if we imagine seeing the world from the perspective of a search engine, our only view of user behavior would be the stream of queries users produce. search engine designers often adopt this perspective, studying these query streams and trying to optimize the engines based on such factors as the length of a typical query. yet this same perspective has prevented us from looking beyond the query, at why the users are performing their searches in the first place. the why of user search behavior is actually essential to satisfying the userinformation need. after all, users donsit down at their computer and say to themselves, thinkll do some searches. searching is merely a means to an end a way to satisfy an underlying goal that the user is trying to achieve. that goal may be choosing a suitable wedding present for a friend, learning which local colleges offer adult education courses in pottery, seeing if a favorite authornew book has been released, or any copyright is held by the author owner. www year#, may, year#, new york, new york, usa. fourth avenue sw, suite year# calgary abp canada dlevinso yahoo inc com number of other possibilities. in fact, in some cases the same query might be used to convey different goals for example, the query ceramics might have been used in any of the three situations above. what difference would it make if the search engine knew the usergoal at the very least, the engine might provide a user experience tailored toward that goal. for example, the display of relevant advertising might be welcome in a shopping context, but unwelcome in a research context. in fact, we have argued elsewhere that goal sensitivity will be one of the crucial factors in future search user interfaces. but the potential to capitalize on this goal sensitivity goes beyond the user interface. the underlying relevance ranking algorithms that determine which results are presented to users might differ depending on the search goal. for example, queries that express a need for advice might rely more on usage or connectivity based relevance factors, while those involving open ended research might weight traditional information retrieval measures more highly. our premise is that web searches reflect a diverse set of underlying user goals, and that knowledge of those goals offers the prospect of future improvements to web search engines. achieving these improvements is an ambitious project involving three primary tasks. first, we need to create a conceptual framework for user goals. second, we need a way for search engines to associate user goals with queries. third, we need to modify the engines in order to exploit the goal information. in this paper we focus on the first task, and the initial parts of the second: characterizing user search goals and examining the problem of inferring goals from query behavior. next, in section #, we describe our model of search goals. in section #, we review the methodology used to classify queries using our model, and we provide some results from this analysis. we conclude with some final thoughts about the applicability of this work. effective organization of search results is critical for improving the utility of any search engine. clustering search results is an effective way to organize search results, which allows a user to navigate into relevant documents quickly. however, two deficiencies of this approach make it not always work well: the clusters discovered do not necessarily correspond to the interesting aspects of a topic from the user perspective; and the cluster labels generated are not informative enough to allow a user to identify the right cluster. in this paper, we propose to address these two deficiencies by learning interesting aspects of a topic from web search logs and organizing search results accordingly; and generating more meaningful cluster labels using past query words entered by users. we evaluate our proposed method on a commercial search engine log data. compared with the traditional methods of clustering search results, our method can give better result organization and more meaningful labels. while the primary factor is the soundness of the underlying retrieval model and ranking function, how to organize and present search results is also a very important factor that can. ect the utility of a search engine signi cantly. compared with the vast amount of literature on retrieval models, however, there is relatively little research on how to improve the. the most common strategy of presenting search results is a simple ranked list. intuitively, such a presentation strategy is reasonable for non ambiguous, homogeneous search permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for pro. or commercial advantage and that copies bear this notice and the full citation on the rst page. to copy otherwise, to republish, to post on servers or to redistribute to lists, requires prior speci. chengxiang zhai department of computer science university of illinois at urbana champaign urbana, il czhai cs uiuc edu results; in general, it would work well when the search results are good and a user can easily nd many relevant documents in the top ranked results. however, when the search results are diverse as is often the case in web search, the ranked list presentation would not be. ective; in such a case, it would be better to group the search results into clusters so that a user can easily navigate into a particular interesting group. for example, the results in the rst page returned from google for the ambiguous query jaguar contain at least four di erent senses of jaguar; even for a more re ned query such as jaguar team picture, the results are still quite ambiguous, including at least four di erent jaguar teams a wrestling team, a jaguar car team, southwestern college jaguar softball team, and jacksonville jaguar football team. moreover, if a user wants to nd a place to download a jaguar software, a query such as download jaguar is also not very. ective as the dominating results are about downloading jaguar brochure, jaguar wallpaper, and jaguar dvd. in these examples, a clustering view of the search results would be much more useful to a user than a simple ranked list. clustering is also useful when the search results are poor, in which case, a user would otherwise have to go through a long list sequentially to reach the very rst relevant document. as a primary alternative strategy for presenting search results, clustering search results has been studied relatively extensively. the general idea in virtually all the existing work is to perform clustering on a set of topranked search results to partition the results into natural clusters, which often correspond to di erent subtopics of the general query topic. a label will be generated to indicate what each cluster is about. a user can then view the labels to decide which cluster to look into. such a strategy has been shown to be more useful than the simple ranked list presentation in several studies. however, this clustering strategy has two de ciencies which make it not always work well: first, the clusters discovered in this way do not necessarily correspond to the interesting aspects of a topic from the userperspective. for example, users are often interested in nding either phone codes or zip codes when entering the query area codes. but the clusters discovered by the current methods may partition the results into local codes and international codes. such clusters would not be very useful for users; even the best cluster would still have a low precision. second, the cluster labels generated are not informative enough to allow a user to identify the right cluster. there are two reasons for this problem: the clusters are not corresponding to a userinterests, so their labels would not be very meaningful or useful. even if a cluster really corresponds to an interesting aspect of the topic, the label may not be informative because it is usually generated based on the contents in a cluster, and it is possible that the user is not very familiar with some of the terms. for example, the ambiguous query jaguar may mean an animal or a car. a cluster may be labeled as panthera onca. although this is an accurate label for a cluster with the animal sense of jaguar, if a user is not familiar with the phrase, the label would not be helpful. in this paper, we propose a di erent strategy for partitioning search results, which addresses these two de ciencies through imposing a user oriented partitioning of the search results. that is, we try to gure out what aspects of a search topic are likely interesting to a user and organize the results accordingly. speci cally, we propose to do the following: first, we will learn interesting aspects of similar topics from search logs and organize search results based on these interesting aspects. for example, if the current query has occurred many times in the search logs, we can look at what kinds of pages viewed by the users in the results and what kind of words are used together with such a query. in case when the query is ambiguous such as jaguar we can expect to see some clear clusters corresponding di erent senses of jaguar. more importantly, even if a word is not ambiguous, we may still discover interesting aspects such as car rental and car pricing. such aspects can be very useful for organizing future search results about car. note that in the case of car, clusters generated using regular clustering may not necessarily re ect such interesting aspects about car from a userperspective, even though the generated clusters are coherent and meaningful in other ways. second, we will generate more meaningful cluster labels using past query words entered by users. assuming that the past search logs can help us learn what speci. aspects are interesting to users given the current query topic, we could also expect that those query words entered by users in the past that are associated with the current query can provide meaningful descriptions of the distinct aspects. thus they can be better labels than those extracted from the ordinary contents of search results. to implement the ideas presented above, we rely on search engine logs and build a history collection containing the past queries and the associated clickthroughs. given a new query, we nd its related past queries from the history collection and learn aspects through applying the star clustering algorithm to these past queries and clickthroughs. we can then organize the search results into these aspects using categorization techniques and label each aspect by the most representative past query in the query cluster. we evaluate our method for result organization using logs of a commercial search engine. we compare our method with the default search engine ranking and the traditional clustering of search results. ective for improving search utility and the labels generated using past query words are more readable than those generated using traditional clustering approaches. the rest of the paper is organized as follows. we rst review the related work in section #. in section #, we describe search engine log data and our procedure of building a history collection. in section #, we present our approach in details. we describe the data set in section # and the experimental results are discussed in section #. finally, we conclude our paper and discuss future work in section #. as a social service in web, folksonomy provides the users the ability to save and organize their bookmarks online with social annotations or tags. we propose a personalized search framework to utilize folksonomy for personalized search. specifically, three properties of folksonomy, namely the categorization, keyword, and structure property, are explored. in the framework, the rank of a web page is decided not only by the term matching between the query and the web page content but also by the topic matching between the user interests and the web page topics. in the evaluation, we propose an automatic evaluation framework based on folksonomy data, which is able to help lighten the common high cost in personalized search evaluations. a series of experiments are conducted using two heterogeneous data sets, one crawled from del icio us and the other from dogear. extensive experimental results show that our personalized search approach can significantly improve the search quality. social annotations are high quality descriptors of the web pages topics as well as good indicators of web users interests. organizing web search results into clusters facilitates users quick browsing through search results. traditional clustering techniques are inadequate since they dont generate clusters with highly readable names. in this paper, we reformalize the clustering problem as a salient phrase ranking problem. given a query and the ranked list of documents returned by a certain web search engine, our method first extracts and ranks salient phrases as candidate cluster names, based on a regression model learned from human labeled training data. the documents are assigned to relevant salient phrases to form candidate clusters, and the final clusters are generated by merging these candidate clusters. experimental results verify our method feasibility and effectiveness. existing search engines such as google, yahoo and msn often return a long list of search results, ranked by their relevancies to the given query. web users have to go through the list and examine the titles and snippets sequentially to identify their required results. this is a time consuming task when multiple sub topics of the given query are mixed together. for example, when a user submits query jaguar into google and wants to get search results related to big cats, he should go to the th, th, nd and st results. a possible solution to this problem is to cluster search permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for profit or commercial advantage and that copies bear this notice and the full citation on the first page. to copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior specific permission and or a fee. lmam, department of information science, school of mathematical sciences, peking university, beijing year#, china heqicai pku edu cn, jwma math pku edu cn results into different groups, and to enable users to identify their required group at a glance. hearst and pedersen showed that relevant documents tend to be more similar to each other, thus the clustering of similar search results helps users find relevant results. in the above example for query jaguar, if there is a group named big cats, the four relevant results will be ranked high in the corresponding list. several previous works are conducted to develop effective and efficient clustering technology for search result organization. in addition, vivisimo is a real demonstration of this technique. an example of search result clustering clustering methods dont require pre defined categories as in classification methods. thus, they are more adaptive for various queries. nevertheless, clustering methods are more challenging than classification methods because they are conducted in a fully unsupervised way. moreover, most traditional clustering algorithms cannot be directly used for search result clustering, because of some practical issues. zamir and etzioni gave a good analysis on these issues. for example, the algorithm should take the document snippets instead of the whole documents as input, since the downloading of original documents is time consuming; the clustering algorithm should be fast enough for online calculation; and the generated clusters should have readable descriptions for quick browsing by users, etc. we also follow these requirements to design our algorithm. in this paper, we reformalize the search result clustering problem as a salient phrases ranking problem. thus we convert an unsupervised clustering problem to a supervised learning problem. although a supervised learning method requires additional training data, it enhances the performance of search result grouping significantly, and enables us to evaluate it accurately. given a query and the ranked list of search results, our method first parses the whole list of titles and snippets, extracts all possible phrases from the contents, and calculates several properties for each phrase such as phrase frequencies, document frequencies, phrase length, etc. a regression model learned from previous training data is then applied to combine these properties into a single salience score. the phrases are ranked according to the salience score, and the top ranked phrases are taken as salient phrases. the salient phrases are in fact names of candidate clusters, which are further merged according to their corresponding documents. our method is more suitable for web search result clustering because we emphasize the efficiency of identifying relevant clusters for web users. it generates shorter cluster names, which enable users to quickly identify the topics of a specified cluster. furthermore, the clusters are ranked according to their salience scores, thus the more likely clusters required by users are ranked higher. some related works are introduced in section #. the problem is defined in section #, together with the whole algorithm described. in section #, we enumerate several properties for salient phrase ranking. the learning techniques that combine these properties are described in section #. the evaluations and clustering result examples are presented in section #. finally we conclude the paper and give some future works in section #.